import type {
    DefaultSharedModuleContext,
    LangiumServices,
    LangiumSharedServices,
    Module,
    PartialLangiumServices,
} from "langium";
import {
    createDefaultModule,
    createDefaultSharedModule,
    inject,
} from "langium";
import {
    JsTransformLangGeneratedModule,
    JsTransformLangGeneratedSharedModule,
} from "./generated/module.js";
import {
    JsTransformLangValidator,
    registerValidationChecks,
} from "./js-transform-lang-validator.js";

/**
 * Declaration of custom services - add your own service classes here.
 */
export type JsTransformLangAddedServices = {
    validation: {
        JsTransformLangValidator: JsTransformLangValidator;
    };
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type JsTransformLangServices = LangiumServices &
    JsTransformLangAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const JsTransformLangModule: Module<
    JsTransformLangServices,
    PartialLangiumServices & JsTransformLangAddedServices
> = {
    validation: {
        JsTransformLangValidator: () => new JsTransformLangValidator(),
    },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createJsTransformLangServices(
    context: DefaultSharedModuleContext
): {
    shared: LangiumSharedServices;
    JsTransformLang: JsTransformLangServices;
} {
    const shared = inject(
        createDefaultSharedModule(context),
        JsTransformLangGeneratedSharedModule
    );
    const JsTransformLang = inject(
        createDefaultModule({ shared }),
        JsTransformLangGeneratedModule,
        JsTransformLangModule
    );
    shared.ServiceRegistry.register(JsTransformLang);
    registerValidationChecks(JsTransformLang);
    return { shared, JsTransformLang };
}
